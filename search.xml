<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL要点整理</title>
    <url>/2019/09/18/MySQL%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>在「极客时间」上购买了林斌奇老师的《MySQL实战45讲》专栏，专栏内容很详实，干货满满，于是做个学习记录，以便日后回顾。<br><strong>文中的一些内容跟配图来源于极客时间教程《MySQL实战45讲》，如有侵权，请联系我删除。</strong></p>
<a id="more"></a>

<h4 id="MySQL逻辑架构："><a href="#MySQL逻辑架构：" class="headerlink" title="MySQL逻辑架构："></a>MySQL逻辑架构：</h4><p>大体来说，MySQL可以分为Server层和存储引擎层两部分。<br>Server层包括<strong>连接器</strong>、<strong>查询缓存</strong>、<strong>分析器</strong>、<strong>优化器</strong>、<strong>执行器</strong>等，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数字和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。<br>存储引擎层负责数据的存储和提取。其架构是插件式的，支持多种存储引擎。MySQL5.5.5版本开始<strong>InnoDB</strong>成为默认存储引擎。</p>
<div style="width:70%;margin:auto"><img src="/2019/09/18/MySQL%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/MySQL%E6%9E%B6%E6%9E%84%E5%9B%BE.png" class="" title="MySQL架构示意图"></div>

<h5 id="一条SQL查询语句的执行过程"><a href="#一条SQL查询语句的执行过程" class="headerlink" title="一条SQL查询语句的执行过程"></a>一条SQL查询语句的执行过程</h5><p><strong>连接器</strong>：连接器负责跟客户端建立连接、获取权限、维持和管理连接。<br>连接数据库，如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。这就意味着，一个用户成功建立连接后，即使管理员账号对这个用户的权限做了修改，也不会影响已经存在的连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。<br><strong>长连接和短连接</strong>：长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询时再重新建立一个。<strong>建议尽量使用长连接</strong>。<br><strong>使用长连接的问题和解决方案</strong><br>全部使用长连接有时候会出现MySQL内存涨得特别快，这是因为MySQL在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长期连接积累下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是MySQL异常重启了。<br>两种解决方案：</p>
<ol>
<li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存大的查询后，断开连接，之后要查询再重连。</li>
<li>每次执行一个比较大的操作后，通过执行mysql_reset_connection来重新初始化链接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。（5.7或之后的版本）</li>
</ol>
<p><strong>查询缓存</strong>：之前执行过的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。如果语句不在查询缓存中，就会继续后面的执行阶段。<br>不建议使用查询缓存。查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。所以只有更新频次很低的静态表适合使用查询缓存。<br><code>MySQL8.0版本直接将查询缓存的整块功能删掉了</code>。<br><strong>分析器</strong>：MySQL对SQL语句做解析。<br><strong>优化器</strong>：优化器实在数据表中有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联(join)的时候，决定各个表的连接顺序。<br>优化器阶段完成后，SQL语句的执行方案就确定了，然后进入执行器阶段。<br><strong>执行器</strong>：执行语句。开始执行的时候，要先判断一下用户对该表有没有执行查询的权限，如果没有，就会返回没有权限的错误。（在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用precheck验证权限。）</p>
<p><strong>一条SQL更新语句的执行过程</strong><br>与查询流程一样的是：<br>连接数据库。<br>这条语句会把该表上所有缓存结果都清空。<br>分析器通过词法和语法解析知道这是一条更新语句。<br>优化器优化。<br>执行器执行。<br><strong>与查询流程不一样的是</strong><br>更新流程还涉及两个重要的日志模块——redo log（重做日志）、binlog（归档日志）。<br><strong>物理日志 redo log</strong><br>如果每一次的更新操作都需要写进磁盘，就意味着每次磁盘也要找到对应的那条记录，然后再更新，整个过程IO成本、查找成本都很高。<br>为解决这个问题，MySQL设计了WAL（Write-Ahead Logging）技术来提升更新效率，它的关键就是先写日志，再写磁盘。<br>具体来说，当有一条记录需要更新的时候，InnoDB引擎就会先把记录写到redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。<br>InnoDB的redo log是固定大小的，从头开始写，写到末尾就又回到开头循环写。redo log中的数据擦除也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。<br>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<strong>crash-safe</strong>。<br><strong>逻辑日志 binlog</strong><br>redo log是InnoDB引擎特有的日志，而Server层也有自己的日志，称为binlog。<br>这两种日志有以下三点不同：</p>
<ol>
<li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li>
<li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1”.</li>
<li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。<br>执行器和InnoDB引擎在执行简单的update语句时的内部流程如下图：<div style="width:50%;margin:auto"><img src="/2019/09/18/MySQL%E8%A6%81%E7%82%B9%E6%95%B4%E7%90%86/InnoDB%E5%BC%95%E6%93%8E%E6%89%A7%E8%A1%8C%E7%AE%80%E5%8D%95update%E8%AF%AD%E5%8F%A5%E6%B5%81%E7%A8%8B.png" class="" title="InnoDB引擎执行简单update语句流程示意图"></div>

</li>
</ol>
<p>浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。<br>最后三步将redo log的写入拆成了两个步骤：prepare和commit，这就是“两阶段提交”。<br><strong>两阶段提交</strong>：两阶段提交的目的是让两份日志之间的逻辑一致。是跨系统维持数据逻辑一致性时常用的一个方案。<br>由于redo log 和 binlog是两个独立的逻辑，如果不用两阶段提交，数据库的状态就有可能和用它的日志恢复出来的的库的状态不一致。<br>简单说，redo log 和binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。<br>相关参数配置：<br>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候，表示每次事务的redo log都直接持久化到磁盘，这样可以保证MySQL异常重启之后数据不丢失。<br>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘，这样可以保证MySQL异常重启之后binlog不丢失。</p>
<p>事务隔离<br>在MySQL中，事务支持是在引擎层实现的。并不是所有的引擎都支持事务。<br>当数据库上有多个事务同时执行的时候，就可能出现脏读、不可重复读、幻读的问题，为了解决这些问题，就有了“隔离级别”的概念。<br>首先要知道，隔离得越严实，效率就会越低。因此很多时候，需要在二者之间寻找一个平衡点。<br>SQL标准的事务隔离级别包括：读未提交（read uncommitted）、读提交（read committed）、可重复读（repeatable read）、串行化（serializable）。<br>读未提交：一个事务还没提交时，它做的变更就能被别的事务看到。</p>
<ul>
<li>事物A和事物B，事物A未提交的数据，事物B可以读取到</li>
<li>这里读取到的数据叫做“脏数据”</li>
<li>这种隔离级别最低，这种级别一般是在理论上存在，数据库隔离级别一般都高于该级别<br>读提交：一个事务提交之后，他做的变更才会被其他事务看到。</li>
<li>事物A和事物B，事物A提交的数据，事物B才能读取到</li>
<li>这种隔离级别高于读未提交</li>
<li>换句话说，对方事物提交之后的数据，我当前事物才能读取到</li>
<li>这种级别可以避免“脏数据”</li>
<li>这种隔离级别会导致“不可重复读取”</li>
<li>Oracle默认隔离级别<br>可重复读：一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li>
<li>事务A和事务B，事务A提交之后的数据，事务B读取不到</li>
<li>事务B是可重复读取数据</li>
<li>这种隔离级别高于读已提交</li>
<li>换句话说，对方提交之后的数据，我还是读取不到</li>
<li>这种隔离级别可以避免“不可重复读取”，达到可重复读取</li>
<li>比如1点和2点读到数据是同一个</li>
<li>MySQL默认级别</li>
<li>虽然可以达到可重复读取，但是会导致“幻像读”<br>串行化：对于同一行记录。“写”会“加锁”，“读”会“加锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li>
<li>事务A和事务B，事务A在操作数据库时，事务B只能排队等待</li>
<li>这种隔离级别很少使用，吞吐量太低，用户体验差</li>
<li>这种级别可以避免“幻像读”，每一次读取的都是数据库中真实存在数据，事务A与事务B串行，而不并发<br>举例说明这几种隔离级别。假设数据表T中只有一列，其中一行的值为1，下面是按照时间顺序执行两个事务的行为。</li>
</ul>
<p>读未提交：  V1 = V2 = V3 = 2<br>读提交： V1 = 1, V2 = V3 = 2<br>可重复读： V1 = V2 = 1, V3 = 2<br>串行化： V1 = V2 = 1, V3 = 2（A执行时B会被锁住）<br>隔离级别与一致性关系：</p>
<p>事务隔离的实现：<br>在MySQL中，每条记录在更新的时候都会同时记录一条回滚操作。记录上的更新值，通过回滚操作，都可以得到前一个状态的值。<br>同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。<br>系统会判断，当没有事务再需要用到这些回滚时，回滚日志会被删除。判断依据是当系统里没有比这个回滚日志更早的read-view的时候。<br>所以建议尽量不要使用长事务。长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。<br>除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库。<br>数据库索引<br>常见的索引模型：<br>哈希表：把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这个位置。如果出现多个key值哈希出同一个值的情况，则拉出一个链表。<br>哈希表中的值并不是递增的，好处是增加新的值时速度会很快，只需要往后追加。但缺点是，因为不是有序的，所以哈希索引做区间查询的速度很慢（需要全部扫描一遍）。<br>所以，哈希表这种结构适用于只有等值查询的场景。<br>有序数组：有序数组在等值查询和范围查询场景中的性能都非常优秀。<br>由于有序数组更新成本太高，所以只适用于静态存储引擎（不会再修改的数据）。<br>搜索树：二叉树、“N”叉树<br>在MySQL中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。<br>InnoDB的索引模型<br>在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。InnoDB使用了B+树索引模型，所以数据都是存储在B+树中的。<br>每一个索引在InnoDB里面对应一颗B+树。<br>根据叶子节点的内容，索引类型分为主键索引和非主键索引。主键索引的叶子节点存的是整行数据。非主键索引的叶子节点内容是主键的值。<br>也就是说，基于非主键索引的查询需要多扫描一颗索引树（回表）。因此，应该尽量使用主键查询。<br>04节结束-05节，有关索引、B+树的理解<br>alter table T engine=InnoDB 语句的作用<br>索引维护<br>向已经满了的数据页插入数据，根据B+树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受到影响。<br>除了性能外，页分裂操作还会影响数据页的利用率。原本放在一个页的数据，现在分裂到两个页中，整体空间利用率降低大约50%。<br>有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。<br>索引覆盖<br>覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。<br>最左前缀原则<br>在建立联合索引的时候，如何安排索引内的字段顺序？第一原则：如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。<br>索引下推<br>在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。<br>全局锁<br>全局锁是对整个数据库实例加锁。MySQL提供了一个加全局读锁的方法，命令是Flush tables with read lock（FTWRL）可以使整个库处于只读状态。之后其他线程的以下语句会被阻塞：数据更新语句（增删改）、数据定义语句（建表、修改表结构等）和更新类事物的提交语句。<br>全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都select出来存成文本。<br>但是让整库都只读，会有以下问题：<br>1、如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；<br>2、如果在从库上备份，那么备份期间从库不能执行主库同步过来的binlog，会导致主从延迟。<br>表级锁<br>MySQL中表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock， MDL）<br>表锁：<br>表锁的语法是 lock tables … read/write 。与FTMRL类似，可以用unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。<br>需要注意的是，lock tables 语法除了会限制别的线程读写外，也限定了本线程接下来的操作对象。<br>元数据锁：<br>MDL不需要显式使用，在访问一个表的时候会被自动加上。MDL的作用是，保证读写的正确性。MySQL5.5.5版本引入了MDL，当对一个表做增删改查操作的时候，加MDL读锁；当要对表结构变更操作的时候，加MDL写锁。<br>1、读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。<br>2、读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能操作。<br>行锁<br>MySQL的行锁是在引擎层由各个引擎自己实现的。不是所有的引擎都支持行锁（比如MyISAM）。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。<br>两阶段锁协议：在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这就意味着，如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。<br>死锁和死锁检测<br>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。<br>出现死锁以后，有两种策略：<br>1、直接进入等待，直到超时。这个超时时间可以通过参数innodb_lock_wait_timeout来设置。<br>2、发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数innodb_deaklock_detect设置为on，表示开启这个逻辑。<br>一般采用第二种策略，但是会有额外负担。尤其遇到热点行更新，死锁检测要耗费大量的CPU资源。就会导致CPU利用率看起来很高，但是执行事务的速度却很慢。<br>解决上述问题的方法：<br>1、临时关闭死锁检测。不推荐。<br>2、控制并发度。<br>首先，由于客户端很多，在客户端做并发控制的方法不太可行。因此，并发控制要做在数据库服务端。可以考虑在中间件实现，也可以在MySQL里面修改源码。基本思路就是，对于相同的更新，在进入引擎之前排队。这样在InnoDB内部就不会有大量的死锁检测工作了。<br>还可以考虑从业务逻辑设计上进行优化。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>web简介</title>
    <url>/2019/08/16/web%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>基于爬虫监控系统的一次简单的web内容分享</p>
<a id="more"></a>

<h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p>前端与后端之间有两种协作方式，一种是<code>服务器端渲染</code>，一种是<code>前后端分离</code>。</p>
<p>服务器端渲染的方式，是指在服务器端就将网页直接生成，浏览器这里拿到的是一整个网页，CSS和JS的部分是在浏览器端执行的，而Html网页的内容部分，是由服务器端生成的。<br>第二种方式就是前后端分离的方式，是浏览器端先拿到HTML，然后通过调用后端接口获取数据。</p>
<p>所以两种方式的区别关键，就在于是，HTML是在哪儿生成的，浏览器和服务端传递的是什么。<br>在前后端分离的方式，浏览器和服务端传递的是数据，而在服务器端渲染的过程中，传递的是HTML网页。</p>
<p>以上是这两种方式的差别，下面介绍一下这两种方式的优劣。</p>
<p><strong>1 数据量</strong><br>前后端分离中传递数据，所以传输量比较小。<br>服务器端渲染，会传输更大的数据，而且，会有很多内容是重复的。<br><strong>2 体验</strong><br>前后端多了一个渲染数据的过程，服务器端省去了这个过程。这也是一直被提到的首屏渲染的问题。<br><strong>3 解耦</strong><br>前后端分离中，传输的是数据，Model，数据怎么展示，全部交给前端来处理，后端只负责提供数据。<br>服务器端渲染中，传输的是Html，后端传给前端的Model，通常是通过Hidden的Input来处理，或者是直接用模板技术生成.数据和展现并未分离。<br><strong>4 控制</strong><br>网页之间有各种跳转交互，在前后端分离中，跳转的页面控制，全部是由前端来决定。跟后端完全没有关系。<br>在服务器端渲染的方式中，大部分是由后端来决定，少部分是由前端来决定。<br><strong>5 SEO</strong><br>前后端分离的方式，通常的载体是SPA，所以拿到的是没有数据的空壳子，很多搜索引擎只认识html里的内容，不认识js渲染生成的内容，搜索引擎不识别，也就不会给一个好排名，会导致单页应用做出来的网页在搜索引擎上的排名差。<br>而服务器端渲染的方式，因为生成的是网页，所以对SEO支持比较好。</p>
<blockquote>
<p><em>SEO: 搜索引擎优化</em><br><em>SPA: 单页面应用</em></p>
</blockquote>
<h4 id="技术栈介绍"><a href="#技术栈介绍" class="headerlink" title="技术栈介绍"></a>技术栈介绍</h4><p><strong>前端</strong><br><a href="https://cn.vuejs.org/index.html" target="_blank" rel="noopener">vue</a> + <a href="https://vuex.vuejs.org/zh/guide/" target="_blank" rel="noopener">VueX</a> + <a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">Vue Router</a><br>参考了后台前端解决方案<a href="https://panjiachen.github.io/vue-element-admin-site/zh/" target="_blank" rel="noopener">vue-element-admin</a></p>
<p><strong>后端</strong><br><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">django</a> + <a href="https://graphql.cn/" target="_blank" rel="noopener">graphql</a></p>
<p><strong>部署</strong><br>nginx + uwsgi</p>
<h4 id="WSGI协议简介"><a href="#WSGI协议简介" class="headerlink" title="WSGI协议简介"></a>WSGI协议简介</h4><p>Web服务器网关接口（Python Web Server Gateway Interface，缩写为WSGI）是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。该规范的具体描述在<a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="noopener">PEP3333</a>。</p>
<p>WSGI主要分为两个部分：<br><strong>Server/Gateway:</strong> 即是HTTP Server，负责从客户端接收http请求，对http请求进行解析，然后调用application，给application提供两个参数environ（环境信息）、start_response（一个回调函数，这个回调函数是用来将应用程序设置的http header和status等信息传递给服务器方），并将application返回的response返回给客户端。<br><strong>Application/Framework:</strong> 一个python web应用或web框架，处理请求，生成返回的header、body和status，并将处理结果返回给server。<br><strong>Middleware:</strong>  略过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># wsgiref.simple_server.demo_app</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo_app</span><span class="hljs-params">(environ, start_response)</span>:</span><br>    <span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> StringIO<br>    stdout = StringIO()<br>    print(<span class="hljs-string">"Hello world!"</span>, file=stdout)<br>    print(file=stdout)<br>    h = sorted(environ.items())<br>    <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> h:<br>        print(k,<span class="hljs-string">'='</span>,repr(v), file=stdout)<br>    start_response(<span class="hljs-string">"200 OK"</span>, [(<span class="hljs-string">'Content-Type'</span>,<span class="hljs-string">'text/plain; charset=utf-8'</span>)])<br>    <span class="hljs-keyword">return</span> [stdout.getvalue().encode(<span class="hljs-string">"utf-8"</span>)]<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span>:</span><br>    ...<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self, environ, start_response)</span>:</span><br>        body = <span class="hljs-string">b"..."</span><br>        status = <span class="hljs-string">"200 OK"</span><br>        headers = [(<span class="hljs-string">"key"</span>, <span class="hljs-string">"value"</span>), ...]<br>        start_response(status, headers)<br>        <span class="hljs-keyword">return</span> [body]<br></code></pre></td></tr></table></figure>

<p>flask、django、tornado都是wsgi框架，使用框架，我们只需要实现业务逻辑。WSGI把来自socket的数据包解析为http格式，Server会传递environ跟start_response给Application，等到Application返回值之后，再socket send返回客户端。<br>Django开发服务器使用的是python原生的wsgiref工具包。<br>Flask自带了一个基于Werkzeug的调试用服务器。根据Flask的文档，在生产环境不应该使用内建的调试服务器，而应该采取以下方式之一进行部署：</p>
<blockquote>
<p>GUNICORN<br>UWSGI</p>
</blockquote>
<p>WSGI的优点:<br>多样的部署选择和组件之间的高度解耦。<br>由于上面提到的高度解耦特性，理论上，任何一个符合WSGI规范的App都可以部署在任何一个实现了WSGI规范的Server上，这给Python Web应用的部署带来了极大的灵活性。<br>缺点: 未发现</p>
<h4 id="跨域资源共享CORS介绍"><a href="#跨域资源共享CORS介绍" class="headerlink" title="跨域资源共享CORS介绍"></a>跨域资源共享CORS介绍</h4><p>当一个资源从与该资源本身所在的服务器不同的<code>域、协议或端口</code>请求一个资源时，资源会发起一个<code>跨域HTTP请求</code>。<br>出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。例如，XMLHttpRequest和Fetch API遵循同源策略。<br>这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，<code>除非响应报文包含了正确CORS响应头</code>。<br><em>所以跨域限制访问，其实是浏览器的限制。</em><br><em>说明：并不一定是浏览器限制了发起跨站请求，也可能是跨站请求可以正常发起，但是返回结果被浏览器拦截了（后文有说明）。</em></p>
<p>跨域资源共享（CORS）机制允许Web应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。现代浏览器支持在API容器中（例如XMLHttpRequest或Fetch使用CORS，以降低跨域HTTP请求所带来的风险。</p>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。<br>若请求满足所有下述条件，则该请求可视为“简单请求”：</p>
<ul>
<li>使用下列方法之一：<ul>
<li>GET</li>
<li>HEAD</li>
<li>POST</li>
</ul>
</li>
<li>HTTP Headers不超出以下几种字段：<ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type（只限于三个值：text/plain、multipart/form-data、application/x-www-form-urlencoded）</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
</ul>
<p>浏览器对这两种请求的处理是不同的。<br>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。然后根据服务器的响应来判断服务器上的资源是否允许该Origin访问。<br>如果是非简单请求，浏览器会首先使用<code>OPTIONS</code>方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。”预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。<br>服务器端可以设置Access-Control-Max-Age字段缓存预检请求的响应结果。在缓存有效期内，该资源的请求（URL和header字段都相同的情况下）不会再触发预检。注意，该缓存只针对这一个请求URL和相同的Header，无法针对整个域或者模糊匹配URL做缓存。</p>
<p>对于附带身份凭证（Cookie）的请求<br>要发送附带Cookie的请求到服务端，首先在客户端要将XMLHttpRequest的withCredentials属性标志设置为true。<br>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。<br>当服务器收到这个请求后，返回给浏览器的Response Headers中必须携带Access-Control-Allow-Credentials: true，否则即使浏览器收到response，也会拦截，不会把响应内容返回给请求的发送者。<br>另外，对于附带身份凭证的请求，服务器不得设置Access-Control-Allow-Origin 的值为”*”（这个值为”*”表明该资源可以被任意外域访问），而必须指定明确的、与请求网页一致的域名。<br>同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p>
<h4 id="Restful接口规范介绍"><a href="#Restful接口规范介绍" class="headerlink" title="Restful接口规范介绍"></a>Restful接口规范介绍</h4><p>REST – Representational State Transfer 直接翻译：表现层状态转移。<br>Restful是一种接口设计风格 —— URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。<br>查询：GET<br>新增：POST<br>修改：PUT、PATCH<br>删除：DELETE</p>
<p>Restful风格的url设计的简单示例<br>rest协议是面向资源的，假如要管理一些用户，那么将用户看作是一种资源：</p>
<ul>
<li>GET /users/{userId}  获取userId对应的user信息</li>
<li>POST /users 创建一个新的user</li>
<li>PUT、PATCH /users/{userId} 更改userId对应的user信息</li>
<li>DELETE /users/{userId} 删除userId对应的user。</li>
</ul>
<p>Restful的六个约束</p>
<ol>
<li>Client-Server 客户端服务器分离<ul>
<li>优点，提高用户界面的便携性（操作简单）</li>
<li>通过简化服务器提高可伸缩性（高性能，低成本）</li>
<li>允许组件分别优化（可以让服务端和客户端分别进行改进和优化）</li>
</ul>
</li>
<li>Statusless 无状态，从客户端的每个请求要包含服务器所需要的所有信息<ul>
<li>提高可见性（可以单独考虑每个请求）</li>
<li>提高了可靠性（更容易从局部故障中修复）</li>
<li>提高可扩展性（降低了服务器资源使用）</li>
</ul>
</li>
<li>Cachable 缓存，服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的信息发送请求<ul>
<li>减少交互次数</li>
<li>减少交互的平均延迟</li>
</ul>
</li>
<li>Layered System 分层系统，封装服务，引入中间层。<ul>
<li>限制了系统的复杂性</li>
<li>提高可扩展性</li>
</ul>
</li>
<li>Uniform Interface 统一接口<ul>
<li>提高交互的可见性</li>
<li>鼓励单独改善组件</li>
</ul>
</li>
<li>Code-On-Demand 支持按需代码（可选）</li>
</ol>
<h4 id="GraphQL接口介绍"><a href="#GraphQL接口介绍" class="headerlink" title="GraphQL接口介绍"></a>GraphQL接口介绍</h4><p>GraphQL是一种API查询语言。<br>它可以将接口的返回值，从静态变为动态，即调用者来声明接口返回什么数据。很大程度上可以进一步解耦前后端的关联。<br>在GraphQL中，我们通过预先定义一张<code>Schema</code>和声明一些<code>Type</code>来达到上述效果，我们需要知道：</p>
<ul>
<li>对于数据模型的抽象是通过Type来描述的</li>
<li>对于接口获取数据的逻辑是通过Schema来描述的</li>
</ul>
<p>简单示例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 文章</span><br>type ArticleType &#123;<br>  id: ID!<br>  text: String!<br>  isPublished: Boolean<br>  author: AuthorType<br>&#125;<br><br><span class="hljs-comment"># 作者</span><br>type AuthorType &#123;<br>  id: ID!<br>  name: String!<br>  age: Int<br>  articles: [ArticleType!]<br>&#125;<br></code></pre></td></tr></table></figure>
<p>几个查询语句</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 只查询文章信息，不包含作者</span><br>query &#123;<br>  ArticleType &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">text</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 查询文章信息，同时需要作者信息</span><br>query &#123;<br>  ArticleType &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">text</span><br>    author &#123;<br>      <span class="hljs-built_in">name</span><br>      age<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 查询某个作者的文章</span><br>query(<br>  $authorId: ID!<br>) &#123;<br>  ArticleType(<br>    authorId: $authorId<br>  ) &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">text</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 只查询作者信息</span><br>query &#123;<br>  AuthorType &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">name</span><br>    age<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 查询作者信息，同时列出该作者的文章</span><br>query &#123;<br>  AuthorType &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">name</span><br>    age<br>    articles &#123;<br>      <span class="hljs-built_in">id</span><br>      <span class="hljs-built_in">text</span><br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment"># 同时查询作者跟文章</span><br>query &#123;<br>  AuthorType &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">name</span><br>    age<br>  &#125;<br>  ArticleType &#123;<br>    <span class="hljs-built_in">id</span><br>    <span class="hljs-built_in">text</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>上述都是query语句，GraphQL一共有三种查询语句：</p>
<ul>
<li>query（查询）：当获取数据时，应当选取Query类型</li>
<li>mutation（更改）：当尝试修改数据时，应当使用mutation类型</li>
<li>subscription（订阅）：当数据更改时，希望进行消息推送，使用subscription类型</li>
</ul>
<p>个人总结GraphQL的几个缺点跟不足：</p>
<ul>
<li>优点<ul>
<li>减少请求冗余，传统的开发方式中需要多次请求的内容，使用GraphQL的方式可能只需要一次请求就可以完成</li>
<li>减少数据冗余，需要什么字段就查询什么字段</li>
<li>前后端之间的开发方式变得更加灵活，只要后端定义好了Schema，前端就可以根据自己的数据需求自定义查询语句</li>
</ul>
</li>
<li>不足<ul>
<li>资料比较少=.=！</li>
<li>相比一些成熟的开发模式，对某些方面的支持还不够好（缓存、错误处理等）</li>
</ul>
</li>
</ul>
<h4 id="TCP三次握手-amp-四次挥手"><a href="#TCP三次握手-amp-四次挥手" class="headerlink" title="TCP三次握手&amp;四次挥手"></a>TCP三次握手&amp;四次挥手</h4><p><strong>三次握手</strong></p>
<ol>
<li>客户端发送一个SYN段，并指明客户端的初始序列号，即ISN(c).</li>
<li>服务端发送自己的SYN段作为应答，同样指明自己的ISN(s)。为了确认客户端的SYN，将ISN(c)+1作为ACK数值。这样，每发送一个SYN，序列号就会加1，如果有丢失的情况，则会重传。</li>
<li>为了确认服务器端的SYN，客户端将ISN(s)+1作为返回的ACK数值。</li>
</ol>
<p><strong>四次挥手</strong><br>TCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。这里简称为A方跟B方</p>
<ol>
<li>当A要关闭连接时，会发送FIN段告知B，我要关闭连接了。</li>
<li>B回复一个ACK，表示知道了，此时A的连接关闭。但B仍然可以继续传输数据。</li>
<li>等到B发送完了所有的数据后，会发送给A一个FIN段来关闭此方向上的连接。</li>
<li>A收到后发送ACK确认关闭连接。<blockquote>
<p>SYN —— 用于初始化一个连接的序列号<br>ISN —— 初始序列号<br>ACK —— 确认，使得确认号有效<br>RST —— 重置连接<br>FIN —— 该报文段的发送方已经结束向对方发送数据</p>
</blockquote>
</li>
</ol>
<h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>对称加密：加密和解密用的是同一个密钥<br>非对称加密（RSA）：有一对密钥，一个是保密的，称为私钥；另一个是公开的，称为公钥。并且<strong>用私钥加密的数据，只有对应的公钥才能解密；用公钥加密的数据，只有对应的私钥才能解密。</strong></p>
<p>利用非对称加密的特性，当A给B发消息的时候，就可以先用B的公钥去加密，B收到消息，就用自己的私钥解密；反之，B给A发消息，就用A的公钥加密，A收到后用自己的私钥解密。</p>
<p>但是RSA算法的加密和解密速度比较慢，所以为了提高通信效率，通讯双方用非对称加密的方法传递对称加密的密钥，这样之后就可以用对称加密来通信。所以现在的问题就是如何安全地来传递公钥。</p>
<p><code>中间人劫持</code>：A给B发送的公钥被中间人C截取，然后C把自己的公钥发给B，冒充A。这样B收到的公钥就是C的，但是B会误以为这是A的公钥，B再用这个公钥对自己的公钥加密，发送给A（实际是C），C拿到信息后用自己的私钥解密，就得到了B的公钥，之后再如法炮制跟A进行通信，就如同一个中间人一样。</p>
<p>现在问题又回到了，如何声明一个公钥确实是发出者的而不是别人的。这时候，我们需要引入第三方，一个权威的证书颁发机构（CA）。</p>
<p>具体步骤：</p>
<ol>
<li>服务端将它的公钥跟一些基本信息（域名）等用Hash算法生成一个消息摘要（防止被篡改），申请CA机构认证。</li>
<li>CA机构用自己的私钥对消息摘要进行加密，形成数据签名；然后把服务端的消息摘要跟数据签名合并，形成一个全新的东西，叫做“数字证书”,签发给服务端。</li>
<li>客户端向服务端发出请求时，服务端返回数字证书。客户端读取证书中的相关的明文信息，采用相同的Hash算法计算得到信息摘要，然后，利用对应CA机构的公钥解密签名数据，对比证书的信息摘要，如果一致，则可以确认证书的合法性，即公钥合法。</li>
</ol>
<p>为了防止攻击者伪装成CA机构，这些CA机构本身也会有证书来证明自己的身份。CA的信用就像树级结构一样是分级的，高层的CA给下层的CA做信用背书，而操作系统&amp;浏览器中会内置一些顶层的CA证书，相当于自动信任了他们。</p>
<h4 id="课外阅读"><a href="#课外阅读" class="headerlink" title="课外阅读"></a>课外阅读</h4><ul>
<li><a href="https://wsgi.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">WSGI 官方文档</a></li>
<li><a href="http://uwsgi-docs.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">uWSGI 官方文档</a></li>
<li><a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="noopener">PEP3333</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">HTTP访问控制（CORS） - MDN</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>web</tag>
        <tag>WSGI</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多重继承设计的一些建议</title>
    <url>/2019/05/20/Python%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[<p>当设计一些较大的项目时，一些设计原则可以帮助我们写出更具有可读性、可维护性、可扩展性的代码。<br>最近精读《流畅的Python》，在有关类的继承章节，读到一些有关类的继承设计的建议，颇有收获。整理在此。<br>本文内容取自《流畅的Python》12.4 —— 处理多重继承</p>
<a id="more"></a>

<h5 id="把接口继承和实现继承区分开"><a href="#把接口继承和实现继承区分开" class="headerlink" title="把接口继承和实现继承区分开"></a>把接口继承和实现继承区分开</h5><p>使用多重继承时，一定要明确一开始为什么创建子类。主要原因可能有：</p>
<ul>
<li>继承接口，创建子类型，实现”是什么”关系</li>
<li>继承实现，通过重用避免代码重复</li>
</ul>
<p>这两条经常同时出现，一定要明确意图。通过继承重用代码是实现细节，通常可以换用组合和委托模式。而接口继承则是框架的支柱。</p>
<h5 id="使用抽象基类显式表示接口"><a href="#使用抽象基类显式表示接口" class="headerlink" title="使用抽象基类显式表示接口"></a>使用抽象基类显式表示接口</h5><p>如果类的作用是定义接口，应该明确把它定义为抽象基类。</p>
<h5 id="通过混入重用代码"><a href="#通过混入重用代码" class="headerlink" title="通过混入重用代码"></a>通过混入重用代码</h5><p>如果一个类的作用是为多个不相关的子类提供方法实现，从而实现重用，但不体现”是什么”关系，这时应该把那个类明确地定义为混入类（Mixin class）。<br>混入类不定义新类，只是打包方法，便于重用。因此<strong>混入类绝对不能实例化，而且具体类不能只继承混入类</strong>。<br>混入类应该提供某方面的特定行为，只实现少量关系非常紧密的方法。</p>
<h5 id="在名称中明确指明混入"><a href="#在名称中明确指明混入" class="headerlink" title="在名称中明确指明混入"></a>在名称中明确指明混入</h5><p>一般是在名称中加入…Mixin后缀。</p>
<h5 id="抽象基类可以作为混入，反过来则不成立"><a href="#抽象基类可以作为混入，反过来则不成立" class="headerlink" title="抽象基类可以作为混入，反过来则不成立"></a>抽象基类可以作为混入，反过来则不成立</h5><p>抽象基类可以实现具体方法，因此也可以作为混入使用。不过，抽象基类会定义类型，而混入做不到。此外，抽象基类可以作为其他类的唯一基类，而混入决不能作为唯一的超类，除非继承另一个更具体的混入 —— 真实的代码很少这样做。<br>抽象基类有个局限是混入没有的：抽象基类中实现的具体方法只能与抽象基类及其超类中的方法协作（存疑）。这表明，抽象基类中的具体方法只是一种便利措施，因为这些方法所做的一切，用户调用抽象基类中的其他方法也能做到。</p>
<h5 id="不要子类化多个具体类"><a href="#不要子类化多个具体类" class="headerlink" title="不要子类化多个具体类"></a>不要子类化多个具体类</h5><p>具体类可以没有，或最多只有一个具体超类。也就是说，具体类的超类中除了这一个具体超类之外，其余的都是抽象基类或混入。</p>
<h5 id="为用户提供聚合类"><a href="#为用户提供聚合类" class="headerlink" title="为用户提供聚合类"></a>为用户提供聚合类</h5><p>如果抽象基类或混入的组合对客户代码非常有用，那就提供一个类，使用易于理解的方式把它们结合起来。</p>
<h5 id="优先使用对象组合，而不是类继承"><a href="#优先使用对象组合，而不是类继承" class="headerlink" title="优先使用对象组合，而不是类继承"></a>优先使用对象组合，而不是类继承</h5><p>优先使用组合能让设计更灵活。<br>组合和委托可以代替混入，把行为提供给不同的类。</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python装饰器跟装饰器工厂函数</title>
    <url>/2019/05/16/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E8%B7%9F%E8%A3%85%E9%A5%B0%E5%99%A8%E5%B7%A5%E5%8E%82%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><strong><em><code>@wrap</code></em></strong><br><strong><em><code>def func(): pass</code></em></strong></p>
<p><strong><em><code>@factory()</code></em></strong><br><strong><em><code>def func(): pass</code></em></strong></p>
<a id="more"></a>


<p>在Python中，一切皆对象，包括函数、自定义的变量等等。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span>&gt; <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>...     pass<br>... <br><span class="hljs-meta">&gt;&gt;</span>&gt; type(func)<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> '<span class="hljs-title">function</span>'&gt;</span><br></code></pre></td></tr></table></figure>
<p>可以看出，自定义的函数就是function的实例，函数之所以能够调用，是因为其实现了<code>__call__()</code>方法。</p>
<h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>装饰器是可调用的对象，其参数是另一个函数「被装饰的函数」。装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象。看下面这个例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorate</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(*args, **kwargs)</span>:</span><br>        <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@decorate</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(m: int, n: int)</span>:</span><br>    <span class="hljs-keyword">return</span> m + n<br><br>print(run)  <span class="hljs-comment"># &lt;function decorate.&lt;locals&gt;.inner at 0x1053a66a8&gt;</span><br>print(run(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 5</span><br></code></pre></td></tr></table></figure>
<p>run函数被decorate装饰器函数装饰之后，我们<code>print(run)</code>发现返回的其实是装饰器内部的inner函数，实际上这是因为被装饰之后，run函数变成了<code>decorate(run(*args, **kwargs))</code>,而decorate函数返回的结果就是inner，也就是<code>print(run)</code>的结果。<br>在inner函数中我们没有做其他操作，直接返回了<code>func(*args, **kwargs)</code>「func就是传入的run」，因此虽然我们调用的run函数被替换掉了，但是调用结果没有变。<br>所以用装饰器装饰一个函数，就相当于把被装饰的函数作为参数传递给装饰器函数，至于要不要返回，返回的是什么，就看装饰器想做什么事情了。</p>
<h4 id="装饰器工厂函数"><a href="#装饰器工厂函数" class="headerlink" title="装饰器工厂函数"></a>装饰器工厂函数</h4><p>有时候简单的装饰器并不能满足我们，我们还想让装饰器接受其他参数。这时候我们可以创建一个装饰器工厂函数，把参数传给它，返回一个装饰器，然后再把它应用到要装饰的函数上。还是来看个例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lazy_object</span><span class="hljs-params">(caches: dict=&#123;&#125;)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrap</span><span class="hljs-params">(func)</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(*args, **kwargs)</span>:</span><br>            cache_name = func.__name__<br>            <span class="hljs-keyword">if</span> cache_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> caches:<br>                caches[cache_name] = func(*args, **kwargs)<br>            <span class="hljs-keyword">return</span> caches[cache_name]<br>        <span class="hljs-keyword">return</span> inner<br>    <span class="hljs-keyword">return</span> wrap<br><br><span class="hljs-meta">@lazy_object()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(n: int)</span>:</span><br>    <span class="hljs-keyword">return</span> n * <span class="hljs-number">10</span><br><br><span class="hljs-meta">@lazy_object(caches=&#123;"weak": 10&#125;)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">weak</span><span class="hljs-params">(n: int)</span>:</span><br>    <span class="hljs-keyword">return</span> n * n<br><br>print(lazy_object())  <span class="hljs-comment"># &lt;function lazy_object.&lt;locals&gt;.wrap at 0x10467e2f0&gt;</span><br>print(run(<span class="hljs-number">2</span>))  <span class="hljs-comment"># 20</span><br>print(run(<span class="hljs-number">4</span>))  <span class="hljs-comment"># 20</span><br>print(weak(<span class="hljs-number">10</span>))  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure>
<p>上面的lazy_object函数就是一个装饰器工厂函数，我们给lazy_object()传入参数，并用它装饰其他函数的时候，实际上真正的装饰器是wrap函数，这里<code>@lazy_object()</code>后面()的作用其实就是调用lazy_object函数，调用的结果就是wrap，然后用wrap来装饰被装饰的函数「这里的warp实际上是一个闭包」。<br>这个装饰器的作用就是维护一个cache字典，将函数名称相同的结果存储下来，下次再调用同名函数，直接返回已有的结果。<br>通过下面的运行结果就可以看出，第一次运行run(2), cache就变成了{“run”: 20}，第二次运行run(4),就直接返回20了。<br>weak(10)也是一样，由于我们给lazy_object传入了caches={“weak”: 10}，所以就直接返回10，而不会再去执行weak函数内部的运算逻辑。</p>
<p>想了解装饰器工厂的具体运用，可以阅读一下python标准库中的functools.lru_cache等装饰器的源代码。</p>
<blockquote>
<blockquote>
<p>流畅的Python 6-7章</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中getattr、__getattr__、__getattribute__的区别</title>
    <url>/2019/03/20/Python%E4%B8%ADgetattr%E3%80%81__getattr__%E3%80%81__getattribute__%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><strong><em><code>getattr(object, name[, default])</code></em></strong></p>
<p><strong><em><code>object.attr</code></em></strong><br><strong><em><code>def __getattr__(self, item)</code></em></strong><br><strong><em><code>def __getattribute__(self, item)</code></em></strong></p>
<a id="more"></a>


<h4 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a>getattr</h4><p>getattr (object, name[, default])是Python的内置函数，它的作用是获取对象的属性。</p>
<ul>
<li>object 对象</li>
<li>name 属性名</li>
<li>default 当属性不存在时，返回的默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs $python3">class Foo:<br>    def __init__(self, x):<br>        self.x &#x3D; x<br><br>f &#x3D; Foo(x&#x3D;10)<br>a &#x3D; getattr(f, &quot;x&quot;)<br>print(a)  # &gt;&gt;&gt; 10<br>b &#x3D; getattr(f, &quot;y&quot;, &quot;NaN&quot;)<br>print(b)  # &gt;&gt;&gt; NaN<br></code></pre></td></tr></table></figure>
<p><em><code>实际调用的就是__getattribute__方法</code></em></p>
<h4 id="getattr-1"><a href="#getattr-1" class="headerlink" title="__getattr__"></a>__getattr__</h4><p>重载__getattr__方法对类及其实例<strong>未定义</strong>的属性有效。也就属性是说，如果访问的属性存在，就不会调用__getattr__方法。包括类属性和实例属性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span><br>        self.x = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span><span class="hljs-params">(self, item)</span>:</span><br>        print(<span class="hljs-string">f"调用__getattr__"</span>)<br>        print(<span class="hljs-string">f"属性<span class="hljs-subst">&#123;item&#125;</span>不存在"</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"__getattr__"</span><br><br>f = Foo(x=<span class="hljs-number">10</span>)<br>print(f.x)<br>print(<span class="hljs-string">"*"</span> * <span class="hljs-number">20</span>)<br>print(f.y)<br></code></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">10<br><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><br>调用<span class="hljs-strong">__getattr__</span><br>属性y不存在<br><span class="hljs-strong">__getattr__</span><br></code></pre></td></tr></table></figure>

<h4 id="getattribute"><a href="#getattribute" class="headerlink" title="__getattribute__"></a>__getattribute__</h4><p>当访问某个对象的属性时，会无条件的调用__getattribute__方法<br><strong>所以为了避免在方法中出现无限递归的情况，应该总是使用基类的方法来获取属性。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span><br>        self.x = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattribute__</span><span class="hljs-params">(self, item)</span>:</span><br>        print(<span class="hljs-string">f"调用__getattribute__, 属性值:<span class="hljs-subst">&#123;item&#125;</span>"</span>)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> super().__getattribute__(item)<br>        <span class="hljs-keyword">except</span>:<br>            print(<span class="hljs-string">f"<span class="hljs-subst">&#123;self&#125;</span>不存在<span class="hljs-subst">&#123;item&#125;</span>属性"</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"__getattribute__"</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f"类Foo(x)"</span><br><br>f = Foo(x=<span class="hljs-number">10</span>)<br>print(f.x)<br>print(<span class="hljs-string">"*"</span> * <span class="hljs-number">20</span>)<br>print(f.y)<br></code></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">调用<span class="hljs-strong">__getattribute__</span>, 属性值:x<br>10<br><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><br>调用<span class="hljs-strong">__getattribute__</span>, 属性值:y<br>类Foo(x)不存在y属性<br><span class="hljs-strong">__getattribute__</span><br></code></pre></td></tr></table></figure>

<p>另外，当同时定义__getattribute__和__getattr__时，__getattr__方法不会再被调用，除非显示调用__getattr__方法或引发AttributeError异常。</p>
<p>同时存在__getattribute__和__getattr__时，__getattr__方法不会再被调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span><br>        self.x = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"__getattr__"</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattribute__</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"__getattribute__"</span><br><br>f = Foo(x=<span class="hljs-number">10</span>)<br>print(f.x)<br>print(<span class="hljs-string">"*"</span> * <span class="hljs-number">20</span>)<br>print(f.y)<br></code></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">__getattribute__</span><br><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><br><span class="hljs-strong">__getattribute__</span><br></code></pre></td></tr></table></figure>

<p>引发AttributeError异常时，__getattr__方法会再被调用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span><br>        self.x = x<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"__getattr__"</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattribute__</span><span class="hljs-params">(self, item)</span>:</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> super().__getattribute__(item)<br>        <span class="hljs-keyword">except</span> AttributeError:<br>            <span class="hljs-keyword">raise</span> AttributeError<br><br>f = Foo(x=<span class="hljs-number">10</span>)<br>print(f.x)<br>print(<span class="hljs-string">"*"</span> * <span class="hljs-number">20</span>)<br>print(f.y)<br></code></pre></td></tr></table></figure>
<p>返回结果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">10<br><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><span class="hljs-strong">*****</span><br><span class="hljs-strong">__getattr__</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
